1) Menu:
	- Trzeba zamknąć menu w ramach jednego componentu, czyli przenieść praktycznie wszystko z menu-item do menu.
	- Chyba trzeba składać menu od strony aplikacji.
	
2) Zorientować się co zrobić, żeby podczas migracji nie tracić danych przechowywanych w bazie danych.

3) Obiekty do zrobienia:
	a) Kontakt
	b) Kontrahent
	c) Dostawca
	d) Faktura
	e) Proforma
	f) Dokumenty magazynowe (WZ, PZ itp)
	
4) Komunikaty dla użytkownika (Komunikaty o błędach.txt)
	
5) Obsługa wyjątków
	- Logowanie wyjątków
	- Temat powiązany z komunikatami o błędach
	
6) Logowanie
	- Samo logowanie jest niby gotowe ale trzeba to obsłużyć jakoś od strony skryptów.
	- Dać możliwość wylogowania
	- Jak jestem zalogowany to pokazać jako kto jestem zalogowany
	- Ustawienia konta (w ogóle możliwość wejścia w moje konto użytkownika)
	
7) Translacje
	- Przydadzą się chociaży do menu
	- Wraz z użytkownikiem trzeba by trzymać gdzieś jego lokalizację (pl-PL)
		
8) Czy da się zrobić tak, żeby komponent dziedziczący po AbstractComponent nie musiał przekazywać wszystkich serviców w konstruktorze?
	- Być może da się zrobić tak, żeby możliwe było przekazywanie dowolnej ilości serwisów. Np. serwisy jako argumenty typu nullable. Albo zmienna ilość argumentów wywołania (albo coś innego).
		<<< Wygląda na to, że coś takiego nie jest wykonalne w typescriptcie
	- Wywołanie metody, która AbstractComponent'u, która wymaga serwisu najpierw musiałoby sprawdzać, czy serwis nie jest nullem. Jeśli jest to wyjątek i komunikat "{service_name} service required".
		<<< zdecydowałem nie wykorzystywać AbstractComponent'u do obsługi serwisów
	
9) Przenieść elementy do odpowiednich folderów:
	- serwisy do folderu "services" <<< zrobione
	- komponenty do folderu "components" <<< zrobione
	(reszta niech zostanie tam gdzie jest)
	<<< zrobione
	
10) Kontrolki:
	- Przycisk
	- Labelka
	- Text-box (numeric itp.)
	- Kalendarz
	- Czas
	- Combo-box
	
11) Style, kolorystyka itp. Trzeba by się zastanowić nad sensowną kolorystyką.	

12) Odpowiedzi z serwera
	- Jakiś parser do odpowiedzi? <<< zrobione (AbstractApiService)
	- Uniwersalny obiekt do odpowiedzi? <<< zrobione (GenericResultContainer)
	- Jakiś standard odpowiedzi? <<< zrobione (GenericResultContainer)
	
13) Jakiś util dostarczający informacji o zalogowanym użytkowniku (code behind).	

14) Przenieść interfejsy serwisów do nowo utworzonego folderu "ServiceInterfaces"
	<<< zrobione
	
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Kolejność:

Komunikaty o błędach
Logowanie
Translacje
Menu